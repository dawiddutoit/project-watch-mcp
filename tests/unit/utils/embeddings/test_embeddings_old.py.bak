"""Tests for embedding providers."""

import os
from unittest.mock import AsyncMock, MagicMock, patch

import pytest

from src.project_watch_mcp.utils.embeddings import (
    EmbeddingsProvider,
    OpenAIEmbeddingsProvider,
    create_embeddings_provider,
)
from tests.unit.utils.embeddings.test_embeddings_utils import TestEmbeddingsProvider


class TestTestEmbeddingsProvider:
    """Test the mock embeddings provider."""

    @pytest.mark.asyncio
    async def test_mock_embed_text(self):
        """Test mock embedding for single text."""
        provider = TestEmbeddingsProvider(dimension=384)
        embedding = await provider.embed_text("Hello, world!")

        assert len(embedding) == 384
        assert all(isinstance(x, float) for x in embedding)
        # Mock embeddings should be deterministic
        embedding2 = await provider.embed_text("Hello, world!")
        assert embedding == embedding2

    @pytest.mark.asyncio
    async def test_mock_embed_batch(self):
        """Test mock embedding for batch of texts."""
        provider = TestEmbeddingsProvider(dimension=256)
        embeddings = await provider.embed_batch(["Hello", "World", "Test"])

        assert len(embeddings) == 3
        assert all(len(emb) == 256 for emb in embeddings)
        assert all(all(isinstance(x, float) for x in emb) for emb in embeddings)

    def test_mock_dimension_property(self):
        """Test dimension property."""
        provider = TestEmbeddingsProvider(dimension=512)
        assert provider.dimension == 512


class TestOpenAIEmbeddingsProvider:
    """Test the OpenAI embeddings provider."""

    @pytest.mark.asyncio
    async def test_openai_initialization_without_key(self):
        """Test that OpenAI provider raises error without API key."""
        with patch.dict(os.environ, {}, clear=True):
            with pytest.raises(ValueError, match="OpenAI API key not provided"):
                OpenAIEmbeddingsProvider()

    @pytest.mark.asyncio
    async def test_openai_initialization_with_key(self):
        """Test OpenAI provider initialization with API key."""
        provider = OpenAIEmbeddingsProvider(api_key="test-key")
        assert provider.api_key == "test-key"
        assert provider.model == "text-embedding-3-small"
        assert provider.dimension == 1536

    @pytest.mark.asyncio
    async def test_openai_embed_text(self):
        """Test OpenAI embedding for single text."""
        with patch("openai.AsyncOpenAI") as MockOpenAI:
            mock_client = AsyncMock()
            MockOpenAI.return_value = mock_client

            # Mock the response
            mock_response = MagicMock()
            mock_response.data = [MagicMock(embedding=[0.1] * 1536)]
            mock_client.embeddings.create.return_value = mock_response

            provider = OpenAIEmbeddingsProvider(api_key="test-key")
            embedding = await provider.embed_text("Hello, world!")

            assert len(embedding) == 1536
            assert embedding == [0.1] * 1536
            mock_client.embeddings.create.assert_called_once_with(
                model="text-embedding-3-small", input="Hello, world!"
            )

    @pytest.mark.asyncio
    async def test_openai_embed_batch(self):
        """Test OpenAI embedding for batch of texts."""
        with patch("openai.AsyncOpenAI") as MockOpenAI:
            mock_client = AsyncMock()
            MockOpenAI.return_value = mock_client

            # Mock the response
            mock_response = MagicMock()
            mock_response.data = [
                MagicMock(embedding=[0.1] * 1536),
                MagicMock(embedding=[0.2] * 1536),
            ]
            mock_client.embeddings.create.return_value = mock_response

            provider = OpenAIEmbeddingsProvider(api_key="test-key")
            embeddings = await provider.embed_batch(["Hello", "World"])

            assert len(embeddings) == 2
            assert embeddings[0] == [0.1] * 1536
            assert embeddings[1] == [0.2] * 1536

    def test_openai_dimension_for_different_models(self):
        """Test dimension property for different models."""
        provider_small = OpenAIEmbeddingsProvider(api_key="test", model="text-embedding-3-small")
        assert provider_small.dimension == 1536

        provider_large = OpenAIEmbeddingsProvider(api_key="test", model="text-embedding-3-large")
        assert provider_large.dimension == 3072


# TODO: LocalEmbeddingsProvider not yet implemented
# class TestLocalEmbeddingsProvider:
    """Test the local embeddings provider."""

    @pytest.mark.asyncio
    async def test_local_initialization(self):
        """Test local provider initialization."""
        provider = LocalEmbeddingsProvider(api_url="http://localhost:9999/embed", dimension=768)
        assert provider.api_url == "http://localhost:9999/embed"
        assert provider.dimension == 768

    @pytest.mark.asyncio
    async def test_local_embed_text_success(self):
        """Test successful local embedding."""
        provider = LocalEmbeddingsProvider()

        with patch("httpx.AsyncClient.post") as mock_post:
            mock_response = MagicMock()
            mock_response.json.return_value = {"embedding": [0.5] * 384}
            mock_response.raise_for_status = MagicMock()
            mock_post.return_value = mock_response

            embedding = await provider.embed_text("Test text")

            assert len(embedding) == 384
            assert embedding == [0.5] * 384
            mock_post.assert_called_once_with(
                "http://localhost:8080/embeddings", json={"text": "Test text"}
            )

    @pytest.mark.asyncio
    async def test_local_embed_text_connection_error(self):
        """Test local embedding with connection error."""
        provider = LocalEmbeddingsProvider()

        with patch("httpx.AsyncClient.post") as mock_post:
            import httpx

            mock_post.side_effect = httpx.ConnectError("Connection failed")

            with pytest.raises(ConnectionError, match="Local embeddings API not available"):
                await provider.embed_text("Test text")

    @pytest.mark.asyncio
    async def test_local_embed_batch_success(self):
        """Test successful local batch embedding."""
        provider = LocalEmbeddingsProvider(dimension=512)

        with patch("httpx.AsyncClient.post") as mock_post:
            mock_response = MagicMock()
            mock_response.json.return_value = {"embeddings": [[0.1] * 512, [0.2] * 512]}
            mock_response.raise_for_status = MagicMock()
            mock_post.return_value = mock_response

            embeddings = await provider.embed_batch(["Text 1", "Text 2"])

            assert len(embeddings) == 2
            assert embeddings[0] == [0.1] * 512
            assert embeddings[1] == [0.2] * 512


class TestEmbeddingsProviderFactory:
    """Test the embeddings provider factory function."""

    def test_create_mock_provider(self):
        """Test creating mock provider."""
        provider = create_embeddings_provider("mock", dimension=256)
        assert isinstance(provider, TestEmbeddingsProvider)
        assert provider.dimension == 256

    def test_create_openai_provider(self):
        """Test creating OpenAI provider."""
        provider = create_embeddings_provider(
            "openai", api_key="test-key", model="text-embedding-3-large"
        )
        assert isinstance(provider, OpenAIEmbeddingsProvider)
        assert provider.api_key == "test-key"
        assert provider.model == "text-embedding-3-large"

    def test_create_local_provider(self):
        """Test creating local provider."""
        provider = create_embeddings_provider(
            "local", api_url="http://example.com/embed", dimension=1024
        )
        assert isinstance(provider, LocalEmbeddingsProvider)
        assert provider.api_url == "http://example.com/embed"
        assert provider.dimension == 1024

    def test_create_invalid_provider(self):
        """Test creating provider with invalid type."""
        with pytest.raises(ValueError, match="Unknown provider type"):
            create_embeddings_provider("invalid")


class TestEmbeddingsProviderInterface:
    """Test the base embeddings provider interface."""

    @pytest.mark.asyncio
    async def test_base_interface_not_implemented(self):
        """Test that base class methods raise NotImplementedError."""
        provider = EmbeddingsProvider()

        with pytest.raises(NotImplementedError):
            await provider.embed_text("test")

        with pytest.raises(NotImplementedError):
            await provider.embed_batch(["test"])

        with pytest.raises(NotImplementedError):
            _ = provider.dimension
