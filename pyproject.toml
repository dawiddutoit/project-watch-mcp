[project]
name = "project-watch-mcp"
version = "0.1.0"
description = "Repository monitoring MCP server with Neo4j-based RAG capabilities"
readme = "README.md"
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
license = { text = "MIT" }
keywords = ["mcp", "neo4j", "rag", "repository", "monitoring", "code-search"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Version Control",
]
requires-python = ">=3.11"
dependencies = [
    "fastmcp>=2.10.5",
    "httpx>=0.28.1",
    "neo4j>=5.26.0",
    "openai>=1.99.6",
    "pathspec>=0.12.1",
    "pydantic>=2.10.1",
    "pygments>=2.19.2",
    "radon>=6.0.1",
    "tiktoken>=0.11.0",
    "tree-sitter>=0.25.1",
    "tree-sitter-java>=0.23.5",
    "tree-sitter-javascript>=0.23.1",
    "tree-sitter-python>=0.23.6",
    "voyageai>=0.3.4",
    "watchfiles>=0.24.0",
    # Vector search dependencies
    "langchain>=0.3.0",
    "langchain-neo4j>=0.2.0",
    "langchain-openai>=0.2.0",
    "langchain-community>=0.3.0",
    "numpy>=1.24.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/project_watch_mcp"]

[tool.uv]
dev-dependencies = [
    "pytest>=8.3.5",
    "pytest-asyncio>=0.25.0",
    "pytest-cov>=5.0.0",
    "black>=24.10.0",
    "ruff>=0.8.0",
    "pyright>=1.1.389",
    "pytest-timeout>=2.4.0",
    "pytest-xdist>=3.8.0",
    "pytest-mock>=3.14.1",
    "freezegun>=1.5.5",
]

[project.scripts]
project-watch-mcp = "project_watch_mcp.cli:cli"

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
asyncio_mode = "auto"
# Removed aggressive parallel execution to fix timeout issues
# Use test profiles below for different execution strategies
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--maxfail=50",  # Stop after 50 failures
]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests requiring external services",
    "slow: Tests taking >1s to execute",
    "benchmark: Performance benchmark tests",
    "performance: Performance-related tests",
    "neo4j: Tests requiring Neo4j database",
    "embeddings: Tests requiring embedding services",
    "mcp: MCP server integration tests",
    "smoke: Critical path smoke tests",
    "regression: Regression test suite",
]

# Test execution profiles for different scenarios
[tool.pytest.profiles]
# Quick smoke tests for rapid feedback
smoke = [
    "-m", "smoke",
    "--timeout=5",
    "-n=4",
    "--tb=short",
    "--maxfail=1"
]

# Fast unit tests with moderate parallelization
fast = [
    "-m", "unit and not slow",
    "--timeout=10",
    "-n=4",
    "--cov=src/project_watch_mcp",
    "--cov-report=term-missing:skip-covered",
    "--cov-fail-under=0"
]

# Standard test suite with coverage
standard = [
    "-m", "not slow",
    "--timeout=30",
    "-n=2",
    "--cov=src/project_watch_mcp",
    "--cov-report=term-missing",
    "--cov-fail-under=60"
]

# Comprehensive test suite with strict coverage
comprehensive = [
    "--timeout=120",
    "-n=1",
    "--cov=src/project_watch_mcp",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80"
]

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long (handled by black)
    "B008", # do not perform function calls in argument defaults
]

[tool.pyright]
pythonVersion = "3.11"
pythonPlatform = "All"
typeCheckingMode = "basic"
reportMissingImports = true
reportMissingTypeStubs = false
