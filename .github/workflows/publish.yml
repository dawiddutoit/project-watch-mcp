name: Build and Publish

on:
  push:
    tags:
      - 'v*'
      - 'v*-alpha*'  # Support alpha tags from PRs
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish to PyPI'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      publish_alpha:
        description: 'Publish alpha version to TestPyPI'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      
      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: uv sync --all-extras --dev
      
      - name: Run black formatter check
        run: uv run black --check src/ tests/
      
      - name: Run ruff linter
        run: uv run ruff check src/ tests/
      
      - name: Run pyright type checker
        run: uv run pyright src/
      
      - name: Run tests with coverage
        run: uv run pytest tests/ --cov=src/project_watch_mcp --cov-report=term-missing --cov-fail-under=60
      
      - name: Upload coverage reports
        if: matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  build:
    name: Build Package
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      
      - name: Set up Python
        run: uv python install 3.11
      
      - name: Build package
        run: uv build
      
      - name: Store built package
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-pypi:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'alpha')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish == 'true')
    environment:
      name: pypi
      url: https://pypi.org/p/project-watch-mcp
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    
    steps:
      - name: Download built package
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

  publish-test-pypi:
    name: Publish to TestPyPI (Optional)
    needs: build
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && contains(github.ref, 'alpha')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_alpha == 'true')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/project-watch-mcp
    permissions:
      id-token: write
    
    steps:
      - name: Download built package
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

  create-release:
    name: Create GitHub Release
    needs: publish-pypi
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'alpha')
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download built package
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ github.ref_name }}" \
            --generate-notes \
            dist/*